const mongoose = require('mongoose');

const mediaSchema = new mongoose.Schema({
  filename: {
    type: String,
    required: true
  },
  originalName: {
    type: String,
    required: true
  },
  url: {
    type: String,
    required: true
  },
  mimetype: {
    type: String,
    required: true
  },
  size: {
    type: Number,
    required: true
  },
  uploadedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  uploadedAt: {
    type: Date,
    default: Date.now
  },
  metadata: {
    width: Number,
    height: Number,
    duration: Number, // For videos
    aiPrompt: String, // If generated by AI
    source: {
      type: String,
      enum: ['upload', 'ai_generated', 'unsplash', 'external'],
      default: 'upload'
    },
    // Unsplash specific fields
    unsplashId: String,
    photographer: String,
    photographerUrl: String,
    attribution: String
  },
  tags: [{
    type: String,
    lowercase: true
  }],
  category: {
    type: String,
    enum: ['image', 'video', 'document', 'other'],
    default: 'other'
  },
  isActive: {
    type: Boolean,
    default: true
  },
  usageCount: {
    type: Number,
    default: 0
  },
  lastUsed: Date
}, {
  timestamps: true
});

// Indexes
mediaSchema.index({ uploadedBy: 1 });
mediaSchema.index({ mimetype: 1 });
mediaSchema.index({ category: 1 });
mediaSchema.index({ tags: 1 });
mediaSchema.index({ uploadedAt: -1 });
mediaSchema.index({ filename: 'text', originalName: 'text', tags: 'text' });

// Virtual for file type
mediaSchema.virtual('fileType').get(function() {
  if (this.mimetype.startsWith('image/')) return 'image';
  if (this.mimetype.startsWith('video/')) return 'video';
  if (this.mimetype.startsWith('audio/')) return 'audio';
  if (this.mimetype.includes('pdf') || this.mimetype.includes('document')) return 'document';
  return 'other';
});

// Method to increment usage count
mediaSchema.methods.recordUsage = function() {
  this.usageCount += 1;
  this.lastUsed = new Date();
  return this.save();
};

// Static method to get usage statistics
mediaSchema.statics.getUsageStats = function() {
  return this.aggregate([
    {
      $group: {
        _id: '$category',
        count: { $sum: 1 },
        totalSize: { $sum: '$size' },
        avgUsage: { $avg: '$usageCount' }
      }
    }
  ]);
};

module.exports = mongoose.model('Media', mediaSchema);
