const mongoose = require('mongoose');
const slugify = require('slugify');

const postSchema = new mongoose.Schema({
  title: {
    type: String,
    required: [true, 'Title is required'],
    trim: true,
    maxlength: [200, 'Title cannot exceed 200 characters']
  },
  slug: {
    type: String,
    unique: true,
    lowercase: true,
    trim: true
  },
  content: {
    type: String,
    required: [true, 'Content is required'],
    minlength: [100, 'Content must be at least 100 characters long']
  },
  excerpt: {
    type: String,
    maxlength: [300, 'Excerpt cannot exceed 300 characters']
  },
  featuredImage: {
    url: String,
    alt: String,
    caption: String,
    aiPrompt: String // Store the AI prompt used to generate the image
  },
  status: {
    type: String,
    enum: ['draft', 'published', 'scheduled', 'archived'],
    default: 'draft'
  },
  publishDate: {
    type: Date,
    default: Date.now
  },
  scheduledDate: {
    type: Date
  },
  author: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  categories: [{
    type: String,
    trim: true
  }],
  tags: [{
    type: String,
    trim: true
  }],
  seo: {
    metaTitle: {
      type: String,
      maxlength: [60, 'Meta title cannot exceed 60 characters']
    },
    metaDescription: {
      type: String,
      maxlength: [160, 'Meta description cannot exceed 160 characters']
    },
    keywords: [String],
    canonicalUrl: String,
    ogImage: String,
    ogTitle: String,
    ogDescription: String
  },
  automation: {
    isAutoGenerated: {
      type: Boolean,
      default: false
    },
    generationDate: Date,
    aiPrompt: String, // Store the AI prompt used to generate content
    generationTime: Number, // Time taken to generate in milliseconds
    apiTokensUsed: Number, // Number of tokens used from Gemini API
    imageGenerationTime: Number,
    imageApiCreditsUsed: Number
  },
  monetization: {
    affiliateLinks: [{
      keyword: String,
      link: String,
      product: String,
      position: Number // Position in content where link was inserted
    }],
    adPlacements: [{
      type: {
        type: String,
        enum: ['banner', 'sidebar', 'inline', 'popup']
      },
      position: String,
      code: String,
      isActive: {
        type: Boolean,
        default: true
      }
    }]
  },
  analytics: {
    views: {
      type: Number,
      default: 0
    },
    uniqueViews: {
      type: Number,
      default: 0
    },
    timeOnPage: {
      type: Number,
      default: 0
    },
    bounceRate: {
      type: Number,
      default: 0
    },
    affiliateClicks: {
      type: Number,
      default: 0
    },
    adClicks: {
      type: Number,
      default: 0
    },
    revenue: {
      type: Number,
      default: 0
    }
  },
  social: {
    shares: {
      facebook: { type: Number, default: 0 },
      twitter: { type: Number, default: 0 },
      linkedin: { type: Number, default: 0 },
      pinterest: { type: Number, default: 0 }
    },
    comments: [{
      author: String,
      email: String,
      content: String,
      date: { type: Date, default: Date.now },
      isApproved: { type: Boolean, default: false }
    }]
  },
  relatedPosts: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Post'
  }],
  readingTime: {
    type: Number,
    default: 0
  },
  wordCount: {
    type: Number,
    default: 0
  }
}, {
  timestamps: true
});

// Indexes for better query performance
postSchema.index({ slug: 1 });
postSchema.index({ status: 1, publishDate: -1 });
postSchema.index({ author: 1 });
postSchema.index({ categories: 1 });
postSchema.index({ tags: 1 });
postSchema.index({ 'automation.isAutoGenerated': 1 });
postSchema.index({ 'analytics.views': -1 });

// Pre-save middleware to generate slug and calculate metrics
postSchema.pre('save', function(next) {
  // Generate slug from title if not provided
  if (!this.slug && this.title) {
    this.slug = slugify(this.title, {
      lower: true,
      strict: true,
      remove: /[*+~.()'"!:@]/g
    });
  }

  // Calculate word count
  if (this.content) {
    this.wordCount = this.content.split(/\s+/).length;
  }

  // Calculate reading time (average 200 words per minute)
  if (this.wordCount > 0) {
    this.readingTime = Math.ceil(this.wordCount / 200);
  }

  // Generate excerpt if not provided
  if (!this.excerpt && this.content) {
    this.excerpt = this.content
      .replace(/<[^>]*>/g, '') // Remove HTML tags
      .substring(0, 300)
      .trim();
    
    if (this.excerpt.length === 300) {
      this.excerpt += '...';
    }
  }

  // Set publish date for scheduled posts
  if (this.status === 'scheduled' && this.scheduledDate) {
    this.publishDate = this.scheduledDate;
  }

  next();
});

// Virtual for full URL
postSchema.virtual('fullUrl').get(function() {
  return `${process.env.BLOG_URL || 'http://localhost:3000'}/blog/${this.slug}`;
});

// Method to increment views
postSchema.methods.incrementViews = function() {
  this.analytics.views += 1;
  return this.save();
};

// Method to add affiliate link
postSchema.methods.addAffiliateLink = function(keyword, link, product, position) {
  this.monetization.affiliateLinks.push({
    keyword,
    link,
    product,
    position
  });
  return this.save();
};

// Method to add ad placement
postSchema.methods.addAdPlacement = function(type, position, code) {
  this.monetization.adPlacements.push({
    type,
    position,
    code,
    isActive: true
  });
  return this.save();
};

// Static method to find published posts
postSchema.statics.findPublished = function() {
  return this.find({
    status: 'published',
    publishDate: { $lte: new Date() }
  }).sort({ publishDate: -1 });
};

// Static method to find posts by category
postSchema.statics.findByCategory = function(category) {
  return this.find({
    status: 'published',
    publishDate: { $lte: new Date() },
    categories: category
  }).sort({ publishDate: -1 });
};

// Static method to find related posts
postSchema.statics.findRelated = function(postId, tags, limit = 3) {
  return this.find({
    _id: { $ne: postId },
    status: 'published',
    publishDate: { $lte: new Date() },
    tags: { $in: tags }
  })
  .sort({ publishDate: -1 })
  .limit(limit);
};

module.exports = mongoose.model('Post', postSchema);
