'use client';

import { useEffect, useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { 
  DocumentTextIcon, 
  EyeIcon, 
  CurrencyDollarIcon, 
  UsersIcon,
  ChartBarIcon,
  ClockIcon
} from '@heroicons/react/24/outline';
import { api } from '@/lib/api';
import DashboardStats from '@/components/admin/DashboardStats';
import RecentPosts from '@/components/admin/RecentPosts';
import TopPosts from '@/components/admin/TopPosts';
import AnalyticsChart from '@/components/admin/AnalyticsChart';
import LoadingSpinner from '@/components/ui/LoadingSpinner';

interface DashboardData {
  posts: {
    total: number;
    published: number;
    draft: number;
    scheduled: number;
    autoGenerated: number;
    manual: number;
    growth: string;
    changeType: 'positive' | 'negative';
  };
  views: {
    total: number;
    growth: string;
    changeType: 'positive' | 'negative';
  };
  revenue: {
    total: number;
    growth: string;
    changeType: 'positive' | 'negative';
  };
  users: {
    total: number;
    active: number;
    growth: string;
    changeType: 'positive' | 'negative';
  };
  recentPosts: Array<{
    _id: string;
    title: string;
    status: string;
    createdAt: string;
    analytics: {
      views: number;
    };
    author?: {
      username: string;
    };
  }>;
  topPosts: Array<{
    _id: string;
    title: string;
    analytics: {
      views: number;
      revenue: number;
    };
    createdAt: string;
    author?: {
      username: string;
    };
  }>;
  analytics: {
    totalContentGenerated: number;
    automationEfficiency: string;
    averageViews: number;
    publishedRatio: string;
  };
}

export default function AdminDashboard() {
  const { data: dashboardData, isLoading, error } = useQuery<DashboardData>({
    queryKey: ['admin-dashboard'],
    queryFn: () => api.get('/admin/dashboard').then(res => res.data.data),
    refetchInterval: 30000, // Refetch every 30 seconds
  });

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <p className="text-red-800">Failed to load dashboard data</p>
      </div>
    );
  }

  const stats = [
    {
      name: 'Total Posts',
      value: dashboardData?.posts.total || 0,
      icon: DocumentTextIcon,
      change: `${parseFloat(dashboardData?.posts.growth || '0') >= 0 ? '+' : ''}${dashboardData?.posts.growth || '0'}%`,
      changeType: dashboardData?.posts.changeType || 'positive' as const,
      color: 'blue'
    },
    {
      name: 'Total Views',
      value: dashboardData?.views.total?.toLocaleString() || '0',
      icon: EyeIcon,
      change: `${parseFloat(dashboardData?.views.growth || '0') >= 0 ? '+' : ''}${dashboardData?.views.growth || '0'}%`,
      changeType: dashboardData?.views.changeType || 'positive' as const,
      color: 'green'
    },
    {
      name: 'Total Revenue',
      value: `$${(dashboardData?.revenue.total || 0).toFixed(2)}`,
      icon: CurrencyDollarIcon,
      change: `${parseFloat(dashboardData?.revenue.growth || '0') >= 0 ? '+' : ''}${dashboardData?.revenue.growth || '0'}%`,
      changeType: dashboardData?.revenue.changeType || 'positive' as const,
      color: 'yellow'
    },
    {
      name: 'Active Users',
      value: dashboardData?.users.active || 0,
      icon: UsersIcon,
      change: `${parseFloat(dashboardData?.users.growth || '0') >= 0 ? '+' : ''}${dashboardData?.users.growth || '0'}%`,
      changeType: dashboardData?.users.changeType || 'positive' as const,
      color: 'purple'
    }
  ];

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>
        <p className="mt-1 text-sm text-gray-500">
          Welcome back! Here's what's happening with your blog.
        </p>
      </div>

      {/* Stats Cards */}
      <DashboardStats stats={stats} />

      {/* Charts and Analytics */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Analytics Overview</h3>
          <AnalyticsChart />
        </div>
        
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Content Analytics</h3>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <DocumentTextIcon className="h-5 w-5 text-blue-500 mr-2" />
                <span className="text-sm text-gray-600">Published Posts</span>
              </div>
              <div className="text-right">
                <span className="text-sm font-medium text-gray-900">
                  {dashboardData?.posts.published || 0}
                </span>
                <span className="text-xs text-gray-500 ml-2">
                  ({dashboardData?.analytics.publishedRatio || '0'}%)
                </span>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <ClockIcon className="h-5 w-5 text-yellow-500 mr-2" />
                <span className="text-sm text-gray-600">Draft Posts</span>
              </div>
              <span className="text-sm font-medium text-gray-900">
                {dashboardData?.posts.draft || 0}
              </span>
            </div>
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <ChartBarIcon className="h-5 w-5 text-green-500 mr-2" />
                <span className="text-sm text-gray-600">AI Generated</span>
              </div>
              <div className="text-right">
                <span className="text-sm font-medium text-gray-900">
                  {dashboardData?.posts.autoGenerated || 0}
                </span>
                <span className="text-xs text-gray-500 ml-2">
                  ({dashboardData?.analytics.automationEfficiency || '0'}%)
                </span>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <EyeIcon className="h-5 w-5 text-purple-500 mr-2" />
                <span className="text-sm text-gray-600">Avg. Views/Post</span>
              </div>
              <span className="text-sm font-medium text-gray-900">
                {dashboardData?.analytics.averageViews?.toLocaleString() || '0'}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Recent Posts and Top Posts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <RecentPosts posts={dashboardData?.recentPosts || []} />
        <TopPosts posts={dashboardData?.topPosts || []} />
      </div>
    </div>
  );
}
